#!/bin/bash
#SBATCH --job-name="buildpython"
#SBATCH --nodes=1
#SBATCH --exclusive
#SBATCH --export=ALL
#SBATCH --time=04:00:00

#Create new builds of python in the directory
#     MYDIR=/nopt/nrel/apps/pythons/${MDY}
#You can safely change the beginning of the
#path but you should keep ${MDY}.  It is a
#date stamp as you can see below. THE INSTALL
#DIRECTORY AND BUILD DIRECTORY SHOULD NOT BE
#THE SAME.
#
#We actually install twice because odd things
#can happen and builds can fail.  If the first
#install works the second will be skipped.
#
#The +tkinter option gives us access to GUI
#stuff but it greatly increases the build time.

#The files mods* and pipit can be used to add
#useful packages to a new install. mods* takes
#a module path and module names.  The module
#path is printed at the end of this script. 
#Look in that path for the actual module names.

#gives us access to newer compilers
source /nopt/nrel/apps/env.sh || echo no /nopt/nrel/apps/env.sh

which git 2> /dev/null ; if [ $? -ne 0 ] ; then module load git ; fi

# Set up our build and install directory
# Build dir is relative to $STARTDIR
# Install dir is absolute
cd `realpath -P .`
STARTDIR=`pwd`
echo $STARTDIR

# Set a date stamp.  If you don't define LETTER
# it defaults to a.  Note you can export LETTER=x
# before sbatching this file.
if [ -z "$LETTER" ]  ; then export LETTER=a ;fi
export MDY=`date +%m%d%y_$LETTER`
export MYDIR=/nopt/nrel/apps/pythons/${MDY}
echo $MYDIR
rm -rf $MYDIR
rm -rf $MDY
mkdir -p $MYDIR

# Copy our scripts to our install directroy
# These should be sufficient to recreate this build
cat $STARTDIR/build_script > $MYDIR/build_script
cp setinstall $MYDIR
cp pipit $MYDIR
printenv > $MYDIR/env


# A simple delta timer (seconds)
mytime () 
{
    now=`date +"%s"`
    if (( $# > 0 )); then
        rtn=`python3 -c "print($now - $1)"`
    else
       rtn=$now
    fi
    echo $rtn
}
    
date
st=`mytime`
now=$st



# Clean out an old spack and redo spack git
# If the build fails it could be because "today's" version of spack
# is broken.  You might need to switch to an earler version.
#rm -rf spack
rm -rf $MDY
mkdir $MDY
cd $MDY
git clone -c feature.manyFiles=true https://github.com/spack/spack.git  
cd spack
export SPACK_ROOT=`pwd`
export SPACK_USER_CONFIG_PATH=${SPACK_ROOT}/.spack
export SPACK_USER_CACHE_PATH=${SPACK_ROOT}/.cache
export TMPDIR=$SPACK_ROOT/tmp
mkdir -p $TMPDIR

# Modify the config files to point to the install directory and to make lmod modules
$STARTDIR/setinstall `realpath -P etc/spack/defaults` `realpath $MYDIR`
source share/spack/setup-env.sh


# Give us a newer version of gcc
#module purge
module load PrgEnv-cray/8.3.3 2> /dev/null || echo no PrgEnv-cray
module load gcc/12.1.0
which gcc
spack compiler find



# Do the install
#for pack in intel-oneapi-compilers intel-oneapi-mpi intel-oneapi-ccl  intel-oneapi-dal intel-oneapi-dnn intel-oneapi-ipp intel-oneapi-ippcp intel-oneapi-mkl intel-oneapi-tbb intel-oneapi-vpl  ; do
#for pack in "python@3.11.2 +tkinter" intel-oneapi-compilers intel-oneapi-mpi intel-oneapi-mkl  ; do
for pack in "python@3.9.0 +tkinter" "python@3.11.2 +tkinter" "python@3.9.0 +tkinter" "python@3.11.2 +tkinter" ; do
#for pack in "python@3.11.2" ; do
#for pack in aspell ; do
echo $pack
now=`mytime`
spack install $pack
echo Time to install $pack: $(mytime $now)
done
echo \$STARTDIR=$STARTDIR
echo \$SPACK_ROOT=$SPACK_ROOT
echo Install directory \$MYDIR=$MYDIR
cd $STARTDIR
echo "modules in:"
BASE=$MYDIR
for KIND in lmod  ; do
for x in `find $BASE/$KIND -type f` ; do dirname `dirname $x` ; done | sort -u | grep $KIND
done
for KIND in  tcl ; do
for x in `find $BASE/$KIND -type f` ; do dirname $x ; done | sort -u | grep $KIND
done

