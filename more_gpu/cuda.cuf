! pgf90  -Mcuda=emu  -o cuda.emu cuda.cuf -Minfo
! pgf90  -Mcuda -ta=nvidia:cuda3.2 -o cuda.exe cuda.cuf -Minfo
subroutine csum( a, b, c, n) 
real*4 a(10,10), b(10,10), c(10,10) 
integer i,j,n
!$acc kernels
  do i=1,n !line7
    do j=1,n !line8 
      c(i,j) = a(i,j)+ b(i,j)
    enddo 
  enddo
!$acc end kernels
end
program main
  use cudafor
  type(cudadeviceprop):: prop
  integer i, j, n 
  real*4 input_a(10,10), input_b(10,10), output_c(10,10) 
  j=cudaGetDeviceProperties( prop, 0)
  write(*,*)"                    name=",trim(prop%name)
  write(*,*)"          totalGlobalMem=",prop%totalGlobalMem
  write(*,*)"       sharedMemPerBlock=",prop%sharedMemPerBlock
  write(*,*)"            regsPerBlock=",prop%regsPerBlock
  write(*,*)"                warpSize=",prop%warpSize
  write(*,*)"                memPitch=",prop%memPitch
  write(*,*)"      maxThreadsPerBlock=",prop%maxThreadsPerBlock
  write(*,*)"           maxThreadsDim=",prop%maxThreadsDim
  write(*,*)"             maxGridSize=",prop%maxGridSize
  write(*,*)"           totalConstMem=",prop%totalConstMem
  write(*,*)"                   major=",prop%major
  write(*,*)"                   minor=",prop%minor
  write(*,*)"               clockRate=",prop%clockRate
  write(*,*)"        textureAlignment=",prop%textureAlignment
  write(*,*)"           deviceOverlap=",prop%deviceOverlap
  write(*,*)"     multiProcessorCount=",prop%multiProcessorCount
  write(*,*)"kernelExecTimeoutEnabled=",prop%kernelExecTimeoutEnabled
  write(*,*)"              integrated=",prop%integrated
  write(*,*)"        canMapHostMemory=",prop%canMapHostMemory
  write(*,*)"             computeMode=",prop%computeMode
  n = 10 
  do i=1,n
    do j=1,n 
      input_a(i,j) = i 
      input_b(i,j) = j
    enddo 
  enddo
  call csum(input_a,input_b,output_c,n) 
  do i=1,n
    do j=1,n
      print*, output_c(i,j) 
    enddo
  enddo
end


