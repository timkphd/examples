## To enable these functions:
## source ./alias
##


## Get a nice node list for a job
thenodes () 
{ 
    if (( $# > 0 )); then
        idwc=$(squeue -j $1 -ho %N);
        dfwe=$(scontrol show hostnames $idwc | tr '\n' ' ');
    else
        dfwe=$(scontrol show hostnames | tr '\n' ' ');
    fi;
    echo $dfwe
}

## Show your accounts
alias accounts='sacctmgr show associations user=$USER format=account%15'


## Show information about a job
alias showjob='scontrol show job'

## Show what I have in the queue
alias sq='squeue -u $USER'
alias sqd='squeue -u $USER  --format='\''%10A%10L %60Z'\'''


## Print a clean module list in load order
mylist () {
    ml 2>&1 | sed s"/) /)/g" | tr " " "\n" | sort -n | grep ")" | sed s"/^[0-9]*//" | sed s"/)//"
}

## Show my recent jobs
recent () 
{ 
    if [ -z ${SUSER+x} ]; then
        ACC=$USER;
    else
        ACC=$SUSER;
    fi;
    if (($# == 2)); then
        echo sacct -S `date --date="$1 days ago" +"%Y-%m-%d"` -E `date --date="$2 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,start,nodelist%25,WorkDir%125;
        sacct -S `date --date="$1 days ago" +"%Y-%m-%d"` -E `date --date="$2 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,start,nodelist%25,WorkDir%125 | sed "s/ \+ /\t/g" | egrep --color=auto -v ^"[0-9]{6,}\.";
    fi;
    if (($# == 1)); then
        echo sacct -S `date --date="$1 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,start,nodelist%25,WorkDir%125;
        sacct -S `date --date="$1 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,start,nodelist%25,WorkDir%125 | sed "s/ \+ /\t/g" | egrep --color=auto -v ^"[0-9]{6,}\.";
    fi;
    if (($# == 0)); then
        echo sacct -S `date --date="14 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,start,nodelist%25,WorkDir%125;
        sacct -S `date --date="14 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,start,nodelist%25,WorkDir%125 | sed "s/ \+ /\t/g" | egrep --color=auto -v ^"[0-9]{6,}\.";
    fi
}

## Show my recent jobs with run time
recentt () 
{ 
    if [ -z ${SUSER+x} ]; then
        ACC=$USER;
    else
        ACC=$SUSER;
    fi;
    if (($# == 2)); then
        echo sacct -S `date --date="$1 days ago" +"%Y-%m-%d"` -E `date --date="$2 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,elapsed,nodelist%25,WorkDir%125;
        sacct -S `date --date="$1 days ago" +"%Y-%m-%d"` -E `date --date="$2 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,elapsed,nodelist%25,WorkDir%125 | sed "s/ \+ /\t/g" | egrep --color=auto -v ^"[0-9]{6,}\.";
    fi;
    if (($# == 1)); then
        echo sacct -S `date --date="$1 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,elapsed,nodelist%25,WorkDir%125;
        sacct -S `date --date="$1 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,elapsed,nodelist%25,WorkDir%125 | sed "s/ \+ /\t/g" | egrep --color=auto -v ^"[0-9]{6,}\.";
    fi;
    if (($# == 0)); then
        echo sacct -S `date --date="14 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,elapsed,nodelist%25,WorkDir%125;
        sacct -S `date --date="14 days ago" +"%Y-%m-%d"` -u $ACC --format=JobID,ExitCode,elapsed,nodelist%25,WorkDir%125 | sed "s/ \+ /\t/g" | egrep --color=auto -v ^"[0-9]{6,}\.";
    fi
}

## Show a list of nodes scheduled to soon  (maybe) be used 
alias pnodes='squeue --start -o "%S %t %Y" |  grep -v null |  grep PD | sed "s/PD//" | sort  | sed "s/T/ /" | head -20'

## Do a salloc of various flavors 
alloc () 
{ 
    DEBUG=debug;
    GDEBUG=debug-gpu;
    GPU=gpu-h100;
    GTCOUNT=128;
    if [ -z ${TCOUNT+x} ]; then
        TCOUNT=104;
    fi;
    if [ -z ${SLURM_ACCOUNT+x} ]; then
        #ACC=hpcapps;
        ACC=`sacctmgr -n show associations user=$USER format=account | head -1 | sed "s/ //g"`
    else
        ACC=$SLURM_ACCOUNT;
    fi;
    case $# in 
        "0")
            mycmd="salloc --exclusive --mem=0 --tasks-per-node=$TCOUNT --nodes=1  --time=01:00:00 --account=$ACC --partition=$DEBUG"
        ;;
        "1")
            if [ "$1" = "gpu" ]; then
                mycmd="salloc --exclusive --mem=0 --tasks-per-node=$GTCOUNT --nodes=1 --time=01:00:00 --account=$ACC --partition=$GPU --gres=gpu:h100:4";
            fi;
            if [ "$1" = "gpu2" ]; then
                mycmd="salloc --exclusive --mem=0 --tasks-per-node=$GTCOUNT --nodes=2 --time=01:00:00 --account=$ACC --partition=$GPU --gres=gpu:h100:4";
            fi;
            if [ "$1" = "dgpu" ]; then
                mycmd="salloc  --nodes=1 --time=01:00:00 --account=$ACC --partition=$GDEBUG --gres=gpu:h100:2";
            fi;
            if [ "$1" = "dgpu2" ]; then
                mycmd="salloc --nodes=2 --time=01:00:00 --account=$ACC --partition=$GDEBUG --gres=gpu:h100:1";
            fi;
            if [ "$1" = "2" ]; then
                mycmd="salloc --exclusive --mem=0 --tasks-per-node=$TCOUNT --nodes=2 --time=01:00:00 --account=$ACC --partition=$DEBUG";
            fi
        ;;
        "2")
            mycmd="salloc --exclusive --mem=0 --tasks-per-node=$TCOUNT --nodes=$1 --time=$2 --account=$ACC --partition=standard"
        ;;
        *)
            echo "alloc [nodes] [time]";
            echo "   OR";
            mycmd='echo "salloc --exclusive --mem=0 --tasks-per-node=$TCOUNT --nodes=N --time=hh:mm:ss --account=$ACC --partition=mypartition"'
        ;;
    esac;
    echo $mycmd;
    eval $mycmd
}


## Send a job to debug, long, short, set time to 1, 5, 60 minutes
todebug ()  {      
    scontrol update JobId=$1 TimeLimit=01:00:00 
    scontrol update JobId=$1 Partition=debug
}

tolong ()
{
    scontrol update JobId=$1 Partition=long
}

toshort ()
{
    scontrol update JobId=$1 Partition=short
}


to01 ()
{
scontrol update JobId=$1 TimeLimit=00:01:00
}

to05 ()
{
scontrol update JobId=$1 TimeLimit=00:05:00
}

to60 ()
{
scontrol update JobId=$1 TimeLimit=00:60:00
}

thedir=`dirname $(realpath ${BASH_SOURCE[0]})`
echo $PATH | grep $thedir > /dev/null ;  if [ $? -ne 0 ]; then export PATH=$thedir:$PATH ; fi
