#!/bin/bash -e
#SBATCH --job-name="array_job"
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=4
#SBATCH --time=00:05:00
###### sending output to /dev/null will suppress it
###### this is a good idea for array jobs lest it
###### create extra output for each subjob
##SBATCH -o /dev/null
##SBATCH --exclusive=user
##SBATCH --account=hpcapps

#SBATCH --mem=5G

#----------------------
# example invocation
# sbatch --array=1-24 array_simple



module load python

export OMP_NUM_THREADS=4


#run with either the C or python version of our program
#export EXE=invertp.py
export EXE=invertc


# go to our starting directory
cd $SLURM_SUBMIT_DIR

# get the JOB and SUBJOB ID
if [[ $SLURM_ARRAY_JOB_ID ]] ; then
	export JOB_ID=$SLURM_ARRAY_JOB_ID
	export SUB_ID=$SLURM_ARRAY_TASK_ID
else
	export JOB_ID=$SLURM_JOB_ID
	export SUB_ID=1
fi

# make a top level directory for the job 
# if it does not already exist
mkdir -p $JOB_ID
cd $JOB_ID


# make a directory for the subjob and go there
mkdir -p $SUB_ID
cd $SUB_ID
# Make a copy of our script
cat $0 > myscript



# Get the name of our LIST, default to list
if [ -z ${LIST+x} ]; then echo "LIST is unset"; export LIST=list ; else echo "LIST is set to '$LIST'"; fi

if [ -z ${USEDIRS+x} ]; then
 	# USEDIRS is not set; default to no
 	export USEDIRS=no
fi

if [[ "$USEDIRS" = "yes" ]] ; then

# Here we assume that our LIST is is a set of directories
# under a "main" directory "inputs" each containing data sets.  
# For our current program we require each directory contain an 
# input file myinput.
#
# We get the directory from the list
        echo using directories for input
	dir=`head -n $SUB_ID $SLURM_SUBMIT_DIR/$LIST | tail -1`
# Copy our input from the directory
	cp -r $SLURM_SUBMIT_DIR/inputs/$dir/* .
	printenv > envs

# Run our job
	hostname > node
	echo $SLURM_SUBMIT_DIR/inputs/$dir > directory

	$SLURM_SUBMIT_DIR/tymer timer start_time
	$SLURM_SUBMIT_DIR/$EXE `cat myinput` > output
	$SLURM_SUBMIT_DIR/tymer timer end_time
else

# Here we assume that our each line of our LIST contains 
# data for our program.
#
# Grab the line  
        echo using command line input
        export input=`head -n $SUB_ID $SLURM_SUBMIT_DIR/$LIST | tail -1`
        printenv > envs

# Run our job
	$SLURM_SUBMIT_DIR/tymer timer start_time
	echo $input > myinput
	eval $SLURM_SUBMIT_DIR/$EXE `cat myinput` > output
	hostname > node
	$SLURM_SUBMIT_DIR/tymer timer end_time
fi

