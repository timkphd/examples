<HTML>
<HEAD>
<TITLE> Summary of Fortran 95 Language </TITLE>
</HEAD>
<BODY>
<H2> Compact Fortran 95 Language Summary </H2>
<PRE>
  This summary was extracted from various sources.
  It is not intended to be 100% complete. Hopefully it will be
  useful as a memory aid in writing Fortran programs.
</PRE>

<H3><a name="Top"> Contents </a></H3>
<dir>


  <LI><a href="#Intr"> Introduction to Fortran 95 Language </a>
  <LI><a href="#Meta"> Meta language used in this compact summary </a>
  <LI><a href="#Stru"> Structure of files that can be compiled </a>
  <LI><a href="#Exec"> Executable Statements and Constructs </a>
  <LI><a href="#Decl"> Declarations </a>
  <LI><a href="#Key"> Key words (other than I/O) </a>
  <LI><a href="#Keyw"> Key words related to I/O </a>
  <LI><a href="#Oper"> Operators </a>
  <LI><a href="#Cons"> Constants </a>
  <LI><a href="#Inpu"> Input/Output Statements </a>
  <LI><a href="#Form"> Formats </a>
  <LI><a href="#Insc"> Intrinsic Functions </a>
  <LI><a href="#Other"> Other Links </a>
</dir>


<H3><a name="Intr"> Introduction to Fortran 95 Language  ISO/IEC 1539:1995 </a></H3>
<PRE>

  Brought to you by ANSI committee X3J3 and ISO-IEC/JTC1/SC22/WG5 (Fortran)
  This is neither complete nor precisely accurate, but hopefully, after
  a small investment of time it is easy to read and very useful.

  This is the free form version of Fortran, no statement numbers,
  no C in column 1, start in column 1 (not column 7),
  typically indent 2, 3, or 4 spaces per each structure.
  The typical extension is  .f90  .

  Continue a statement on the next line by ending the previous line with
  an ampersand  &amp; .  Start the continuation with  &amp;  for strings.

  The rest of any line is a comment starting with an exclamation mark  ! .

  Put more than one statement per line by separating statements with a
  semicolon  ; . Null statements are OK, so lines can end with semicolons.

  Separate words with space or any form of "white space" or punctuation.
</PRE>

<H3><a name="Meta"> Meta language used in this compact summary </a></H3>
<PRE>

  &lt;xxx&gt; means fill in something appropriate for xxx and do not type
        the  "&lt;"  or  "&gt;" .

  ...  ellipsis means the usual, fill in something, one or more lines

  [stuff] means supply nothing or at most one copy of "stuff"
          [stuff1 [stuff2]] means if "stuff1" is included, supply nothing
          or at most one copy of stuff2.

  "old" means it is in the language, like almost every feature of past
  Fortran standards, but should not be used to write new programs.

</PRE>

<H3><a name="Stru"> Structure of files that can be compiled </a></H3>
<PRE>

  program &lt;name&gt;                  usually file name is  &lt;name&gt;.f90
    use &lt;module_name&gt;             bring in any needed modules
    implicit none                 good for error detection
    &lt;declarations&gt;
    &lt;executable statements&gt;       order is important, no more declarations
  end program &lt;name&gt;


  block data &lt;name&gt;               old
    &lt;declarations&gt;                common, dimension, equivalence now obsolete
  end block data &lt;name&gt;


  module &lt;name&gt;                   bring back in with   use &lt;name&gt;
    implicit none                 good for error detection
    &lt;declarations&gt;                can have private and public and interface
  end module &lt;name&gt;

  subroutine &lt;name&gt;               use:  call &lt;name&gt;   to execute
    implicit none                 good for error detection
    &lt;declarations&gt;
    &lt;executable statements&gt;
  end subroutine &lt;name&gt;


  subroutine &lt;name&gt;(par1, par2, ...) 
                                  use:  call &lt;name&gt;(arg1, arg2,... ) to execute
    implicit none                 optional, good for error detection
    &lt;declarations&gt;                par1, par2, ... are defined in declarations 
                                  and can be specified in, inout, pointer, etc.
    &lt;executable statements&gt;
    return                        optional, end causes automatic return
    entry &lt;name&gt; (par...)         old, optional other entries
  end subroutine &lt;name&gt;


  function &lt;name&gt;(par1, par2, ...) result(&lt;rslt&gt;)
                                  use: &lt;name&gt;(arg1, arg2, ... argn) as variable
    implicit none                 optional, good for error detection
    &lt;declarations&gt;                rslt, par1, ... are defined in declarations
    &lt;executable statements&gt;
    &lt;rslt&gt; = &lt;expression&gt;         required somewhere in execution
    [return]                      optional, end causes automatic return
  end function &lt;name&gt;

                                  old
  &lt;type&gt; function(...) &lt;name&gt;     use: &lt;name&gt;(arg1, arg2, ... argn) as variable
    &lt;declarations&gt;
    &lt;executable statements&gt;
    &lt;name&gt; = &lt;expression&gt;         required somewhere in execution
    [return]                      optional, end causes automatic return
  end function &lt;name&gt;

</PRE>

<H3><a name="Exec"> Executable Statements and Constructs </a></H3>
<PRE>

  &lt;statement&gt; will mean exactly one statement in this section

  a construct is multiple lines

  &lt;label&gt; : &lt;statement&gt;      any statement can have a label (a name)

  &lt;variable&gt; = &lt;expression&gt;  assignment statement

  &lt;pointer&gt;  &gt;= &lt;variable&gt;   the pointer is now an alias for the variable
  &lt;pointer1&gt; &gt;= &lt;pointer2&gt;    pointer1 now points same place as pointer2

  stop                       can be in any executable statement group,
  stop &lt;integer&gt;             terminates execution of the program,
  stop &lt;string&gt;              can have optional integer or string

  return                     exit from subroutine or function

  do &lt;variable&gt;=&lt;from&gt;,&lt;to&gt; [,&lt;increment&gt]   optional:  &lt;label&gt; : do ...
     &lt;statements&gt;

     exit                                   \_optional   or exit &lt;label&gt
     if (&lt;boolean expression&gt;) exit         /
                                            exit the loop
     cycle                                  \_optional   or cycle &lt;label&gt;
     if (&lt;boolean expression&gt;) cycle        /
                                            continue with next loop iteration
  end do                                    optional:    end do &lt;name&gt;


  do while (&lt;boolean expression&gt;)
     ...                                   optional exit and cycle allowed
  end do


  do
     ...                                   exit required to end the loop
                                           optional  cycle  can be used
  end do



  if ( &lt;boolean expression&gt; ) &lt;statement&gt;  execute the statement if the
                                           boolean expression is true

  if ( &lt;boolean expression1&gt; ) then
    ...                                    execute if expression1 is true
  else if ( &lt;boolean expression2&gt; ) then
    ...                                    execute if expression2 is true
  else if ( &lt;boolean expression3&gt; ) then
    ...                                    execute if expression3 is true
  else
    ...                                    execute if none above are true
  end if


  select case (&lt;expression&gt;)            optional &lt;name&gt; : select case ...
     case (&lt;value&gt;)
        &lt;statements&gt;                    execute if expression == value
     case (&lt;value1&gt;:&lt;value2&gt;)           
        &lt;statements&gt;                    execute if value1 &le; expression &le; value2
     ...
     case default
        &lt;statements&gt;                    execute if no values above match
  end select                            optional  end select &lt;name&gt;


  real, dimension(10,12) :: A, R     a sample declaration for use with "where"
    ...
  where (A /= 0.0)                   conditional assignment, only assignment allowed
     R = 1.0/A
  elsewhere
     R = 1.0                         elements of R set to 1.0 where A == 0.0
  end where

    go to &lt;statement number&gt;          old

    go to (&lt;statement number list&gt;), &lt;expression&gt;   old

    for I/O statements, see:  section 10.0  Input/Output Statements

    many old forms of statements are not listed
</PRE>

<H3><a name="Decl">  Declarations </a></H3>
<PRE>

  There are five (5) basic types: integer, real, complex, character and logical.
  There may be any number of user derived types.  A modern (not old) declaration
  starts with a type, has attributes, then ::, then variable(s) names

  integer i, pivot, query                             old

  integer, intent (inout) :: arg1

  integer (selected_int_kind (5)) :: i1, i2

  integer, parameter :: m = 7

  integer, dimension(0:4, -5:5, 10:100) :: A3D

  double precision x                                 old

  real  (selected_real_kind(15,300) :: x

  complex :: z

  logical, parameter :: what_if = .true.

  character, parameter :: me = "Jon Squire"

  type &lt;name&gt;       a new user type, derived type
    declarations
  end type &lt;name&gt;

  type (&lt;name&gt;) :: stuff    declaring stuff to be of derived type &lt;name&gt;

  real, dimension(:,:), allocatable, target :: A

  real, dimension(:,:), pointer :: P

  Attributes may be:

    allocatable  no memory used here, allocate later
    dimension    vector or multi dimensional array
    external     will be defined outside this compilation
    intent       argument may be  in, inout or out
    intrinsic    declaring function to be an intrinsic
    optional     argument is optional
    parameter    declaring a constant, can not be changed later
    pointer      declaring a pointer
    private      in a module, a private declaration
    public       in a module, a public declaration
    save         keep value from one call to the next, static
    target       can be pointed to by a pointer
    Note:        not all combinations of attributes are legal
</PRE>

<H3><a name="Key"> Key words (other than I/O) </a></H3>
<PRE>

  note: "statement" means key word that starts a statement, one line
                    unless there is a continuation "&amp;"
        "construct" means multiple lines, usually ending with "end ..."
        "attribute" means it is used in a statement to further define
        "old"       means it should not be used in new code

  allocatable          attribute, no space allocated here, later allocate
  allocate             statement, allocate memory space now for variable
  assign               statement, old, assigned go to
  assignment           attribute, means subroutine is assignment (=)
  block data           construct, old, compilation unit, replaced by module
  call                 statement, call a subroutine
  case                 statement, used in  select case structure
  character            statement, basic type, intrinsic data type
  common               statement, old, allowed overlaying of storage
  complex              statement, basic type, intrinsic data type
  contains             statement, internal subroutines and functions follow
  continue             statement, old, a place to put a statement number
  cycle                statement, continue the next iteration of a do loop
  data                 statement, old, initialized variables and arrays
  deallocate           statement, free up storage used by specified variable
  default              statement, in a select case structure, all others
  do                   construct, start a do loop
  double precision     statement, old, replaced by selected_real_kind(15,300)
  else                 construct, part of if   else if   else   end if
  else if              construct, part of if   else if   else   end if
  elsewhere            construct, part of where  elsewhere  end where
  end block data       construct, old, ends block data
  end do               construct, ends do
  end function         construct, ends function
  end if               construct, ends if
  end interface        construct, ends interface
  end module           construct, ends module
  end program          construct, ends program
  end select           construct, ends select case
  end subroutine       construct, ends subroutine
  end type             construct, ends type
  end where            construct, ends where
  entry                statement, old, another entry point in a procedure
  equivalence          statement, old, overlaid storage
  exit                 statement, continue execution outside of a do loop
  external             attribute, old statement, means defines else where
  function             construct, starts the definition of a function
  go to                statement, old, requires fixed form statement number
  if                   statement and construct, if(...) statement
  implicit             statement, "none" is preferred to help find errors
  in                   a keyword for intent, the argument is read only
  inout                a keyword for intent, the argument is read/write
  integer              statement, basic type, intrinsic data type
  intent               attribute, intent(in) or intent(out) or intent(inout)
  interface            construct, begins an interface definition
  intrinsic            statement, says that following names are intrinsic
  kind                 attribute, sets the kind of the following variables
  len                  attribute, sets the length of a character string
  logical              statement, basic type, intrinsic data type
  module               construct, beginning of a module definition
  namelist             statement, defines a namelist of input/output
  nullify              statement, nullify(some_pointer) now points nowhere
  only                 attribute, restrict what comes from a module
  operator             attribute, indicates function is an operator, like +
  optional             attribute, a parameter or argument is optional
  out                  a keyword for intent, the argument will be written
  parameter            attribute, old statement, makes variable real only
  pause                old, replaced by stop
  pointer              attribute, defined the variable as a pointer alias
  private              statement and attribute, in a module, visible inside
  program              construct, start of a main program
  public               statement and attribute, in a module, visible outside
  real                 statement, basic type, intrinsic data type
  recursive            attribute, allows functions and derived type recursion
  result               attribute, allows naming of function result  result(Y)
  return               statement, returns from, exits, subroutine or function
  save                 attribute, old statement, keep value between calls
  select case          construct, start of a case construct
  stop                 statement, terminate execution of the main procedure
  subroutine           construct, start of a subroutine definition
  target               attribute, allows a variable to take a pointer alias
  then                 part of if construct
  type                 construct, start of user defined type
  type ( )             statement, declaration of a variable for a users type
  use                  statement, brings in a module
  where                construct, conditional assignment
  while                construct, a while form of a do loop
</PRE>

<H3><a name="Keyw"> Key words related to I/O </a></H3>
<PRE>

  backspace            statement, back up one record
  close                statement, close a file
  endfile              statement, mark the end of a file
  format               statement, old, defines a format
  inquire              statement, get the status of a unit
  open                 statement, open or create a file
  print                statement, performs output to screen
  read                 statement, performs input
  rewind               statement, move read or write position to beginning
  write                statement, performs output

</PRE>

<H3><a name="Oper"> Operators </a></H3>
<PRE>

  **    exponentiation
  *     multiplication
  /     division
  +     addition
  -     subtraction
  //    concatenation
  ==    .eq.  equality
  /=    .ne.  not equal
  &lt;     .lt.  less than
  &gt;     .gt.  greater than
  &lt;=    .le.  less than or equal
  &gt;=    .ge.  greater than or equal
  .not.       complement, negation
  .and.       logical and
  .or.        logical or
  .eqv.       logical equivalence
  .neqv.      logical not equivalence, exclusive or

  .eq.  ==    equality, old
  .ne.  /=    not equal. old
  .lt.  &lt;     less than, old
  .gt.  &gt;     greater than, old
  .le.  &lt;=    less than or equal, old
  .ge.  &gt;=    greater than or equal, old


  Other punctuation:

   /  ...  /  used in data, common, namelist and other statements
   (/ ... /)  array constructor, data is separated by commas
   6*1.0      in some contexts, 6 copies of 1.0
   (i:j:k)    in some contexts, a list  i, i+k, i+2k, i+3k, ... i+nk&le;j
   (:j)       j and all below
   (i:)       i and all above
   (:)        undefined or all in range

</PRE>

<H3><a name="Cons"> Constants </a></H3>
<PRE>

  Logical constants:

    .true.      True
    .false.     False

  Integer constants:

     0    1     -1     123456789

  Real constants:

     0.0   1.0   -1.0    123.456   7.1E+10   -52.715E-30

  Complex constants:

     (0.0, 0.0)    (-123.456E+30, 987.654E-29)

  Character constants:

      "ABC"   "a"  "123'abc$%#@!"    " a quote "" "
      'ABC'   'a'  '123"abc$%#@!'    ' a apostrophe '' '

  Derived type values:

      type name
        character (len=30) :: last
        character (len=30) :: first
        character (len=30) :: middle
      end type name

      type address
        character (len=40) :: street
        character (len=40) :: more
        character (len=20) :: city
        character (len=2)  :: state
        integer (selected_int_kind(5)) :: zip_code
        integer (selected_int_kind(4)) :: route_code
      end type address

      type person
        type (name) lfm
        type (address) snail_mail
      end type person

      type (person) :: a_person = person( name("Squire","Jon","S."), &amp;
          address("106 Regency Circle", "", "Linthicum", "MD", 21090, 1936))

      a_person%snail_mail%route_code == 1936

</PRE>

<H3><a name="Inpu"> Input/Output Statements </a></H3>
<PRE>

    open (&lt;unit number&gt;)
    open (unit=&lt;unit number&gt;, file=&lt;file name&gt;, iostat=&lt;variable&gt;)
    open (unit=&lt;unit number&gt;, ... many more, see below )

    close (&lt;unit number&gt;)
    close (unit=&lt;unit number&gt;, iostat=&lt;variable&gt;,
           err=&lt;statement number&gt;, status="KEEP")

    read (&lt;unit number&gt;) &lt;input list&gt;
    read (unit=&lt;unit number&gt;, fmt=&lt;format&gt;, iostat=&lt;variable&gt;,
          end=&lt;statement number&gt;, err=&lt;statement number&gt;) &lt;input list&gt;
    read (unit=&lt;unit number&gt;, rec=&lt;record number&gt;) &lt;input list&gt;

    write (&lt;unit number&gt;) &lt;output list&gt;
    write (unit=&lt;unit number&gt;, fmt=&lt;format&gt;, iostat=&lt;variable&gt;,
           err=&lt;statement number&gt;) &lt;output list&gt;
    write (unit=&lt;unit number&gt;, rec=&lt;record number&gt;) &lt;output list&gt;

    print *, &lt;output list&gt;

    print "(&lt;your format here, use apostrophe, not quote&gt;)", &lt;output list&gt;

    rewind &lt;unit number&gt;
    rewind (&lt;unit number&gt;, err=&lt;statement number&gt;)

    backspace &lt;unit number&gt;
    backspace (&lt;unit number&gt;, iostat=&lt;variable&gt;)

    endfile &lt;unit number&gt;
    endfile (&lt;unit number&gt;, err=&lt;statement number&gt;, iostat=&lt;variable&gt;)

    inquire ( &lt;unit number&gt;, exists = &lt;variable&gt;)
    inquire ( file=&lt;"name"&gt;, opened = &lt;variable1&gt;, access = &lt;variable2&gt; )
    inquire ( iolength = &lt;variable&gt; ) x, y, A   ! gives "recl" for "open"

    namelist /&lt;name&gt;/ &lt;variable list&gt;      defines a name list
    read(*,nml=&lt;name&gt;)                     reads some/all variables in namelist
    write(*,nml=&lt;name&gt;)                    writes all variables in namelist
    &amp;&lt;name&gt; &lt;variable&gt;=&lt;value&gt; ... &lt;variable=value&gt; /  data for namelist read

  Input / Output specifiers

    access   one of  "sequential"  "direct"  "undefined"
    action   one of  "read"  "write"  "readwrite"
    advance  one of  "yes"  "no"  
    blank    one of  "null"  "zero"
    delim    one of  "apostrophe"  "quote"  "none"
    end      =       &lt;integer statement number&gt;  old
    eor      =       &lt;integer statement number&gt;  old
    err      =       &lt;integer statement number&gt;  old
    exist    =       &lt;logical variable&gt;
    file     =       &lt;"file name"&gt;
    fmt      =       &lt;"(format)"&gt; or &lt;character variable&gt; format
    form     one of  "formatted"  "unformatted"  "undefined"
    iolength =       &lt;integer variable, size of unformatted record&gt;
    iostat   =       &lt;integer variable&gt; 0==good, negative==eof, positive==bad
    name     =       &lt;character variable for file name&gt;
    named    =       &lt;logical variable&gt;
    nml      =       &lt;namelist name&gt;
    nextrec  =       &lt;integer variable&gt;    one greater than written
    number   =       &lt;integer variable unit number&gt;
    opened   =       &lt;logical variable&gt;
    pad      one of  "yes"  "no"
    position one of  "asis"  "rewind"  "append"
    rec      =       &lt;integer record number&gt;
    recl     =       &lt;integer unformatted record size&gt;
    size     =       &lt;integer variable&gt;  number of characters read before eor
    status   one of  "old"  "new"  "unknown"  "replace"  "scratch"  "keep"
    unit     =       &lt;integer unit number&gt;

  Individual questions
    direct      =    &lt;character variable&gt;  "yes"  "no"  "unknown"
    formatted   =    &lt;character variable&gt;  "yes"  "no"  "unknown"
    read        =    &lt;character variable&gt;  "yes"  "no"  "unknown"
    readwrite   =    &lt;character variable&gt;  "yes"  "no"  "unknown"
    sequential  =    &lt;character variable&gt;  "yes"  "no"  "unknown"
    unformatted =    &lt;character variable&gt;  "yes"  "no"  "unknown"
    write       =    &lt;character variable&gt;  "yes"  "no"  "unknown"

</PRE>

<H3><a name="Form"> Formats </a></H3>
<PRE>

    format                    an explicit format can replace * in any
                              I/O statement. Include the format in
                              apostrophes or quotes and keep the parenthesis.

    examples:
         print "(3I5,/(2X,3F7.2/))", &lt;output list&gt;
         write(6, '(a,E15.6E3/a,G15.2)' ) &lt;output list&gt;
         read(unit=11, fmt="(i4, 4(f3.0,TR1))" ) &lt;input list&gt;
                             
    A format includes the opening and closing parenthesis.
    A format consists of format items and format control items separated by comma.
    A format may contain grouping parenthesis with an optional repeat count.

  Format Items, data edit descriptors:

    key:  w  is the total width of the field   (filled with *** if overflow)
          m  is the least number of digits in the (sub)field (optional)
          d  is the number of decimal digits in the field
          e  is the number of decimal digits in the exponent subfield
          c  is the repeat count for the format item
          n  is number of columns

    cAw     data of type character (w is optional)
    cBw.m   data of type integer with binary base
    cDw.d   data of type real -- same as E,  old double precision
    cEw.d   or Ew.dEe  data of type real
    cENw.d  or ENw.dEe  data of type real  -- exponent a multiple of 3
    cESw.d  or ESw.dEe  data of type real  -- first digit non zero
    cFw.d   data of type real  -- no exponent printed
    cGw.d   or Gw.dEe  data of type real  -- auto format to F or E
    nH      n characters follow the H,  no list item
    cIw.m   data of type integer
    cLw     data of type logical  --  .true.  or  .false.
    cOw.m   data of type integer with octal base
    cZw.m   data of type integer with hexadecimal base
    "&lt;string&gt;"  literal characters to output, no list item
    '&lt;string&gt;'  literal characters to output, no list item

  Format Control Items, control edit descriptors:

    BN      ignore non leading blanks in numeric fields
    BZ      treat nonleading blanks in numeric fields as zeros
    nP      apply scale factor to real format items   old
    S       printing of optional plus signs is processor dependent
    SP      print optional plus signs
    SS      do not print optional plus signs
    Tn      tab to specified column
    TLn     tab left n columns
    TRn     tab right n columns
    nX      tab right n columns
    /       end of record (implied / at end of all format statements)
    :       stop format processing if no more list items

  &lt;input list&gt; can be:
    a variable
    an array name
    an implied do   ((A(i,j),j=1,n) ,i=1,m)    parenthesis and commas as shown

    note: when there are more items in the input list than format items, the
          repeat rules for formats applies.

  &lt;output list&gt; can be:
    a constant
    a variable
    an expression
    an array name
    an implied do   ((A(i,j),j=1,n) ,i=1,m)    parenthesis and commas as shown

    note: when there are more items in the output list than format items, the
          repeat rules for formats applies.

  Repeat Rules for Formats:

    Each format item is used with a list item.  They are used in order.
    When there are more list items than format items, then the following
    rule applies:  There is an implied end of record, /, at the closing
    parenthesis of the format, this is processed.  Scan the format backwards
    to the first left parenthesis.  Use the repeat count, if any, in front
    of this parenthesis, continue to process format items and list items.

    Note: an infinite loop is possible
          print "(3I5/(1X/))", I, J, K, L    may never stop

</PRE>

<H3><a name="Insc"> Intrinsic Functions </a></H3>
<PRE>

  Intrinsic Functions are presented in alphabetical order and then grouped
  by topic.  The function name appears first. The argument(s) and result
  give an indication of the type(s) of argument(s) and results.
  [,dim=] indicates an optional argument  "dim".
  "mask" must be logical and usually conformable.
  "character" and "string" are used interchangeably.
  A brief description or additional information may appear.


  Intrinsic Functions (alphabetical):

    abs(integer_real_complex) result(integer_real_complex)
    achar(integer) result(character)  integer to character
    acos(real) result(real)  arccosine  |real| &le; 1.0   0&le;result&le;Pi
    adjustl(character)  result(character) left adjust, blanks go to back
    adjustr(character)  result(character) right adjust, blanks to front
    aimag(complex) result(real)  imaginary part
    aint(real [,kind=]) result(real)  truncate to integer toward zero
    all(mask [,dim]) result(logical)  true if all elements of mask are true
    allocated(array) result(logical)  true if array is allocated in memory
    anint(real [,kind=]) result(real)  round to nearest integer
    any(mask [,dim=}) result(logical)  true if any elements of mask are true
    asin(real) result(real)  arcsine  |real| &le; 1.0   -Pi/2&le;result&le;Pi/2
    associated(pointer [,target=]) result(logical)  true if pointing
    atan(real) result(real)  arctangent  -Pi/2&le;result&le;Pi/2 
    atan2(y=real,x=real) result(real)  arctangent  -Pi&le;result&le;Pi
    bit_size(integer) result(integer)  size in bits in model of argument
    btest(i=integer,pos=integer) result(logical)  true if pos has a 1, pos=0..
    ceiling(real) result(real)  truncate to integer toward infinity
    char(integer [,kind=]) result(character)  integer to character [of kind]
    cmplx(x=real [,y=real] [kind=]) result(complex)  x+iy
    conjg(complex) result(complex)  reverse the sign of the imaginary part
    cos(real_complex) result(real_complex)  cosine
    cosh(real) result(real)  hyperbolic cosine
    count(mask [,dim=]) result(integer)  count of true entries in mask
    cshift(array,shift [,dim=]) circular shift elements of array, + is right
    date_and_time([date=] [,time=] [,zone=] [,values=])  y,m,d,utc,h,m,s,milli
    dble(integer_real_complex) result(real_kind_double)  convert to double
    digits(integer_real) result(integer)  number of bits to represent model
    dim(x=integer_real,y=integer_real) result(integer_real) proper subtraction
    dot_product(vector_a,vector_b) result(integer_real_complex) inner product
    dprod(x=real,y=real) result(x_times_y_double)  double precision product
    eoshift(array,shift [,boundary=] [,dim=])  end-off shift using boundary
    epsilon(real) result(real)  smallest positive number added to 1.0 /= 1.0
    exp(real_complex) result(real_complex)  e raised to a power
    exponent(real) result(integer)  the model exponent of the argument
    floor(real) result(real)  truncate to integer towards negative infinity
    fraction(real) result(real)  the model fractional part of the argument
    huge(integer_real) result(integer_real)  the largest model number
    iachar(character) result(integer)  position of character in ASCII sequence
    iand(integer,integer) result(integer)  bit by bit logical and
    ibclr(integer,pos) result(integer)  argument with pos bit cleared to zero
    ibits(integer,pos,len) result(integer)  extract len bits starting at pos
    ibset(integer,pos) result(integer)  argument with pos bit set to one
    ichar(character) result(integer)  pos in collating sequence of character
    ieor(integer,integer) result(integer)  bit by bit logical exclusive or
    index(string,substring [,back=])  result(integer)  pos of substring
    int(integer_real_complex) result(integer)  convert to integer
    ior(integer,integer) result(integer)  bit by bit logical or
    ishft(integer,shift) result(integer)  shift bits in argument by shift
    ishftc(integer, shift) result(integer)  shift circular bits in argument
    kind(any_intrinsic_type) result(integer)  value of the kind
    lbound(array,dim) result(integer)  smallest subscript of dim in array
    len(character) result(integer)  number of characters that can be in argument
    len_trim(character) result(integer)  length without trailing blanks
    lge(string_a,string_b) result(logical)  string_a &ge; string_b
    lgt(string_a,string_b) result(logical)  string_a &gt; string_b
    lle(string_a,string_b) result(logical)  string_a &le; string_b
    llt(string_a,string_b) result(logical)  string_a &lt; string_b
    log(real_complex) result(real_complex)  natural logarithm
    log10(real) result(real)  logarithm base 10
    logical(logical [,kind=])  convert to logical
    matmul(matrix,matrix) result(vector_matrix)  on integer_real_complex_logical
    max(a1,a2,a3,...) result(integer_real)  maximum of list of values
    maxexponent(real) result(integer)  maximum exponent of model type
    maxloc(array [,mask=]) result(integer_vector)  indices in array of maximum
    maxval(array [,dim=] [,mask=])  result(array_element)  maximum value
    merge(true_source,false_source,mask) result(source_type)  choose by mask
    min(a1,a2,a3,...) result(integer-real)  minimum of list of values
    minexponent(real) result(integer)  minimum(negative) exponent of model type
    minloc(array [,mask=]) result(integer_vector)  indices in array of minimum
    minval(array [,dim=] [,mask=])  result(array_element)  minimum value
    mod(a=integer_real,p) result(integer_real)  a modulo p
    modulo(a=integer_real,p) result(integer_real)  a modulo p
    mvbits(from,frompos,len,to,topos) result(integer)  move bits
    nearest(real,direction) result(real)  nearest value toward direction
    nint(real [,kind=]) result(real)  round to nearest integer value
    not(integer) result(integer)  bit by bit logical complement
    pack(array,mask [,vector=]) result(vector)  vector of elements from array
    present(argument) result(logical)  true if optional argument is supplied
    product(array [,dim=] [,mask=]) result(integer_real_complex)  product
    radix(integer_real) result(integer)  radix of integer or real model, 2
    random_number(harvest=real_out)  subroutine, uniform random number 0 to 1
    random_seed([size=] [,put=] [,get=])  subroutine to set random number seed
    range(integer_real_complex) result(integer_real)  decimal exponent of model
    real(integer_real_complex [,kind=]) result(real)  convert to real
    repeat(string,ncopies) result(string)  concatenate n copies of string
    reshape(source,shape,pad,order) result(array)  reshape source to array
    rrspacing(real) result(real)  reciprocal of relative spacing of model
    scale(real,integer) result(real)  multiply by  2**integer
    scan(string,set [,back]) result(integer)  position of first of set in string
    selected_int_kind(integer) result(integer)  kind number to represent digits
    selected_real_kind(integer,integer) result(integer)  kind of digits, exp
    set_exponent(real,integer) result(real)  put integer as exponent of real
    shape(array) result(integer_vector)  vector of dimension sizes
    sign(integer_real,integer_real) result(integer_real) sign of second on first
    sin(real_complex) result(real_complex)  sine of angle in radians
    sinh(real) result(real)  hyperbolic sine of argument
    size(array [,dim=]) result(integer)  number of elements in dimension
    spacing(real) result(real)  spacing of model numbers near argument
    spread(source,dim,ncopies) result(array)  expand dimension of source by 1
    sqrt(real_complex) result(real_complex)  square root of argument
    sum(array [,dim=] [,mask=]) result(integer_real_complex)  sum of elements
    system_clock([count=] [,count_rate=] [,count_max=])  subroutine, all out
    tan(real) result(real)  tangent of angle in radians
    tanh(real) result(real)  hyperbolic tangent of angle in radians
    tiny(real) result(real)  smallest positive model representation
    transfer(source,mold [,size]) result(mold_type)  same bits, new type
    transpose(matrix) result(matrix)  the transpose of a matrix
    trim(string) result(string)  trailing blanks are removed
    ubound(array,dim) result(integer)  largest subscript of dim in array
    unpack(vector,mask,field) result(v_type,mask_shape)  field when not mask
    verify(string,set [,back]) result(integer)  pos in string not in set



  Intrinsic Functions (grouped by topic):

  Intrinsic Functions (Numeric)
    abs(integer_real_complex) result(integer_real_complex)
    acos(real) result(real)  arccosine  |real| &le; 1.0   0&le;result&le;Pi
    aimag(complex) result(real)  imaginary part
    aint(real [,kind=]) result(real)  truncate to integer toward zero
    anint(real [,kind=]) result(real)  round to nearest integer
    asin(real) result(real)  arcsine  |real| &le; 1.0   -Pi/2&le;result&le;Pi/2
    atan(real) result(real)  arctangent  -Pi/2&le;result&le;Pi/2 
    atan2(y=real,x=real) result(real)  arctangent  -Pi&le;result&le;Pi
    ceiling(real) result(real)  truncate to integer toward infinity
    cmplx(x=real [,y=real] [kind=]) result(complex)  x+iy
    conjg(complex) result(complex)  reverse the sign of the imaginary part
    cos(real_complex) result(real_complex)  cosine
    cosh(real) result(real)  hyperbolic cosine
    dble(integer_real_complex) result(real_kind_double)  convert to double
    digits(integer_real) result(integer)  number of bits to represent model
    dim(x=integer_real,y=integer_real) result(integer_real) proper subtraction
    dot_product(vector_a,vector_b) result(integer_real_complex) inner product
    dprod(x=real,y=real) result(x_times_y_double)  double precision product
    epsilon(real) result(real)  smallest positive number added to 1.0 /= 1.0
    exp(real_complex) result(real_complex)  e raised to a power
    exponent(real) result(integer)  the model exponent of the argument
    floor(real) result(real)  truncate to integer towards negative infinity
    fraction(real) result(real)  the model fractional part of the argument
    huge(integer_real) result(integer_real)  the largest model number
    int(integer_real_complex) result(integer)  convert to integer
    log(real_complex) result(real_complex)  natural logarithm
    log10(real) result(real)  logarithm base 10
    matmul(matrix,matrix) result(vector_matrix)  on integer_real_complex_logical
    max(a1,a2,a3,...) result(integer_real)  maximum of list of values
    maxexponent(real) result(integer)  maximum exponent of model type
    maxloc(array [,mask=]) result(integer_vector)  indices in array of maximum
    maxval(array [,dim=] [,mask=])  result(array_element)  maximum value
    min(a1,a2,a3,...) result(integer-real)  minimum of list of values
    minexponent(real) result(integer)  minimum(negative) exponent of model type
    minloc(array [,mask=]) result(integer_vector)  indices in array of minimum
    minval(array [,dim=] [,mask=])  result(array_element)  minimum value
    mod(a=integer_real,p) result(integer_real)  a modulo p
    modulo(a=integer_real,p) result(integer_real)  a modulo p
    nearest(real,direction) result(real)  nearest value toward direction
    nint(real [,kind=]) result(real)  round to nearest integer value
    product(array [,dim=] [,mask=]) result(integer_real_complex)  product
    radix(integer_real) result(integer)  radix of integer or real model, 2
    random_number(harvest=real_out)  subroutine, uniform random number 0 to 1
    random_seed([size=] [,put=] [,get=])  subroutine to set random number seed
    range(integer_real_complex) result(integer_real)  decimal exponent of model
    real(integer_real_complex [,kind=]) result(real)  convert to real
    rrspacing(real) result(real)  reciprocal of relative spacing of model
    scale(real,integer) result(real)  multiply by  2**integer
    set_exponent(real,integer) result(real)  put integer as exponent of real
    sign(integer_real,integer_real) result(integer_real) sign of second on first
    sin(real_complex) result(real_complex)  sine of angle in radians
    sinh(real) result(real)  hyperbolic sine of argument
    spacing(real) result(real)  spacing of model numbers near argument
    sqrt(real_complex) result(real_complex)  square root of argument
    sum(array [,dim=] [,mask=]) result(integer_real_complex)  sum of elements
    tan(real) result(real)  tangent of angle in radians
    tanh(real) result(real)  hyperbolic tangent of angle in radians
    tiny(real) result(real)  smallest positive model representation
    transpose(matrix) result(matrix)  the transpose of a matrix


  Intrinsic Functions (Logical and bit)

    all(mask [,dim]) result(logical)  true if all elements of mask are true
    any(mask [,dim=}) result(logical)  true if any elements of mask are true
    bit_size(integer) result(integer)  size in bits in model of argument
    btest(i=integer,pos=integer) result(logical)  true if pos has a 1, pos=0..
    count(mask [,dim=]) result(integer)  count of true entries in mask
    iand(integer,integer) result(integer)  bit by bit logical and
    ibclr(integer,pos) result(integer)  argument with pos bit cleared to zero
    ibits(integer,pos,len) result(integer)  extract len bits starting at pos
    ibset(integer,pos) result(integer)  argument with pos bit set to one
    ieor(integer,integer) result(integer)  bit by bit logical exclusive or
    ior(integer,integer) result(integer)  bit by bit logical or
    ishft(integer,shift) result(integer)  shift bits in argument by shift
    ishftc(integer, shift) result(integer)  shift circular bits in argument
    logical(logical [,kind=])  convert to logical
    matmul(matrix,matrix) result(vector_matrix)  on integer_real_complex_logical
    merge(true_source,false_source,mask) result(source_type)  choose by mask
    mvbits(from,frompos,len,to,topos) result(integer)  move bits
    not(integer) result(integer)  bit by bit logical complement
    transfer(source,mold [,size]) result(mold_type)  same bits, new type



  intrinsic Functions (Character or string)

    achar(integer) result(character)  integer to character
    adjustl(character)  result(character) left adjust, blanks go to back
    adjustr(character)  result(character) right adjust, blanks to front
    char(integer [,kind=]) result(character)  integer to character [of kind]
    iachar(character) result(integer)  position of character in ASCII sequence
    ichar(character) result(integer)  pos in collating sequence of character
    index(string,substring [,back=])  result(integer)  pos of substring
    len(character) result(integer)  number of characters that can be in argument
    len_trim(character) result(integer)  length without trailing blanks
    lge(string_a,string_b) result(logical)  string_a &ge; string_b
    lgt(string_a,string_b) result(logical)  string_a &gt; string_b
    lle(string_a,string_b) result(logical)  string_a &le; string_b
    llt(string_a,string_b) result(logical)  string_a &lt; string_b
    repeat(string,ncopies) result(string)  concatenate n copies of string
    scan(string,set [,back]) result(integer)  position of first of set in string
    trim(string) result(string)  trailing blanks are removed
    verify(string,set [,back]) result(integer)  pos in string not in set

</PRE>

<H3><a name="Other"> Other Links </a></H3>
<UL>

</UL>

<H3><a href="#Top"> Go to top </a></H3>

<P> Last updated 8/23/2009 for html, from 1998 version</P>

</BODY>
</HTML>


