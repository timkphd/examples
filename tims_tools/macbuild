#!/bin/bash

#SBATCH --job-name="buildpython"
#SBATCH --nodes=1
##SBATCH --exclusive
#SBATCH --mem=0 
#SBATCH --time=04:00:00
##SBATCH --partition=gpu-h100 
##SBATCH --reservation=h100-testing 
##SBATCH --gres=gpu:h100:4
#SBATCH --account=hpcapps

#set up a newer environment
#source /nopt/nrel/apps/gpu_stack/env_cpe23.sh

# make sure we have git
export SPATH=$PATH
export PATH=`echo $PATH | sed s,:/usr/local/bin:,:, `

which git 2> /dev/null || ml git

# Simple timer
mytime () 
{ 
    #now=`date +"%s.%N"`;
    now=`date +"%s.000"`;

    if (( $# > 0 )); then
        rtn=$(printf "%0.3f" `echo $now - $1 | bc`);
    else
        rtn=$(printf "%0.3f" `echo $now`);
    fi;
    echo $rtn
}

# Where are we?
cd `realpath .`
STARTDIR=`pwd`
echo $STARTDIR

# MDY is used as the build directory relative to
# the starting directory and as the subdirectory
# for the install.  It's a date stamp with a trailing
# lettter.
export LETTER=clangr

if [ -z "$LETTER" ]  ; then export LETTER=a ; fi
export MDY=`date +%m%d%y_$LETTER`

# set our base install directory
export BASED=/Users/tkaiser2/nopt/nrel
if [ -z "$BASED" ]  ; then export BASED=/nopt/nrel/apps/apptainer ; fi
#if [ -z "$BASED" ]  ; then export BASED=/nopt/nrel/apps/cudnn ; fi
export BIRD=${BASED}/${MDY}

echo $BIRD
echo $MDY

rm -rf $BIRD
rm -rf $MDY
mkdir -p $BIRD
mkdir $MDY

# get patches 
ls setinstall 2>/dev/null || wget https://raw.githubusercontent.com/timkphd/examples/master/tims_tools/setinstall
chmod 755 setinstall
ls tkinter 2>/dev/null    || wget https://raw.githubusercontent.com/timkphd/examples/master/tims_tools/tkinter
 
# save our environment in the build and install directories
cp  $STARTDIR/build_script  $BIRD/build_script
cp setinstall $BIRD
cp tkinter $BIRD
printenv > $BIRD/env


st=`mytime`
now=$st

cd $MDY
export DOWNLOAD=release
export DOWNLOAD=git

if echo $DOWNLOAD | grep rel > /dev/null ; then
  ## if you don't have wget download the file manually and point to it here.
  /Users/tkaiser2/nopt/nrel/090624_clang/opt/darwin-sonoma-m1/apple-clang-15.0.0/wget-1.24.5-id274gyndf22eimnh65mnjkbsx7o3lqd/bin/wget https://github.com/spack/spack/releases/download/v0.22.1/spack-0.22.1.tar.gz
  tar -xzf spack-0.22.1.tar.gz
  rm -rf spack-0.22.1.tar.gz
else
  git clone https://github.com/spack/spack.git
fi
cd spack*


export SPACK_ROOT=`pwd`
export SPACK_USER_CONFIG_PATH=${SPACK_ROOT}/.spack
export SPACK_USER_CACHE_PATH=${SPACK_ROOT}/.cache
export TMPDIR=$SPACK_ROOT/tmp
mkdir -p $TMPDIR
sed -I .org "s/ urllib/ curl /" etc/spack/defaults/config.yaml 
mv etc/spack/defaults/config.yaml.org .
$STARTDIR/setinstall `realpath etc/spack/defaults` `realpath $BIRD`
source share/spack/setup-env.sh

#export PATH=/usr/local/gfortran/bin:$PATH

spack compiler find
spack compiler rm gcc@14.1.0

# On Sep 6 2024 gcc@14.1.0 worked with the git version.  
# Could not get gcc to work with the release version.

#for pack in "lmod@8.7.2" coreutils "gcc@14.1.0" wget ; do
for pack in "lmod@8.7.2" coreutils wget ; do
#for pack in "lmod@8.7.2" ; do

echo installing $pack
now=`mytime`
spack info $pack
spack install --no-check-signature --no-checksum $pack
echo Time to install $pack: $(mytime $now)
done

#report on install
echo export STARTDIR=$STARTDIR
echo export SPACK_ROOT=$SPACK_ROOT
echo export SPACK_USER_CONFIG_PATH=$SPACK_ROOT/.spack
echo export SPACK_USER_CACHE_PATH=$SPACK_ROOT/.cache
echo export TMPDIR=$SPACK_ROOT/tmp
echo source $SPACK_ROOT/share/spack/setup-env.sh
echo Install directory \$BIRD=$BIRD
cd $STARTDIR
echo "modules in:"
BASE=$BIRD
#find our module directory
LDIR=$(for x in `find $BASE/lmod -type f` ; do dirname `dirname $x` ; done | sort -u | grep lmod)
echo $LDIR









