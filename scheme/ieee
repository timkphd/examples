(define frac (lambda (x i k l)
               (if (= i 24) 
                   l
                   (if (< (- x (/ k 2)) 0)
                       (frac x (+ i 1) (/ k 2) (append l '(0)))
                       (frac (- x (/ k 2)) (+ i 1) (/ k 2) (append l '(1)))))))

(frac 0.2096 1 1 '())
(define prepend (lambda (a b) (append b a)))


(define ln2 (lambda (x) (/ (log x) (log 2))))

(ln2 1238.7)

(define fraction (lambda (x) (- x (truncate x))))
(fraction 123.4567)


(define newbase (lambda (x b l)
                  (if (= 0 x)
                      l
                      (append (newbase (quotient x b) b l) (list (remainder x b))))))
(newbase 964 8 '())

(define base2 (lambda (x) (newbase x 2 '())))

(base2 1024)

(define mytrunc (lambda (x) (inexact->exact (truncate x))))
(mytrunc 1234.5678)


(define power (lambda (x) (base2 (+ 127 (mytrunc (ln2 x))))))

(define f2 (lambda (x) (/ x (expt 2 (mytrunc (ln2 x))))))
(f2 5)
(define f3 (lambda (x) (exact->inexact (- (f2 x) 1))))

(f3 5)

(append (power 5) (frac (f3 5) 1 1 '()))


(define expand8 (lambda (x)
                  (if (= 8 (length x))
                      x
                      (expand8 (append '(0) x)))))

(define ieee (lambda (x)
               (if (< x 0)
                   (cons '1 (append (expand8 (power (abs x) )) (frac (f3 (abs x)) 1 1 '())))
                   (cons '0 (append (expand8 (power (abs x) )) (frac (f3 (abs x)) 1 1 '()))))))

(ieee 5)
                   

(ln2 1)


(define part (lambda (x f l z)
               (if (> f l) z
                   (cons (nth f x) (part x (+ 1 f) l z)))))
               
                      
                      
(part '(1 2 3 4 5 6 7 8 9 10 11 12) 3 7 '())

(define shiftright (lambda (x) 
                     (if (<= (length x) 1) '()
                            (reverse (rest (reverse x))))))
(define last (lambda (x) (first (reverse x))))



(define base10 (lambda (l x z)
                 (if (= 0 (length l)) 
                     0
                     (+ 
                       (* x (last l)) 
                       (base10 (shiftright l)  (* 2 x) z)))))
(base10 '(1 1 1 1 1 1 1) 1 0)

                 

(define baseX (lambda (l x z)
                 (if (= 0 (length l)) 
                     0
                     (+ 
                       (* x (first l)) 
                       (baseX (rest l)  (* 0.5 x) z)))))


(define p1 (lambda (x)
             (expt 2 (-  (base10 (part x 2 9 '()) 1 0) 127))))
(define p2 (lambda (x)
             (basex (cons '1 (list-tail x 9)) 1 0)))

(define thesign (lambda (x)
                  (if (= 1 (first x)) -1 1)))



(define toreal (lambda (x)
                 (* (thesign x) (* (p1 x) (p2 x)))))
(toreal '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ))
(p1 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ))
(p2 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ))