(define count (lambda (x l)
                (if (null? l) 
                    0
                    (+ (count x (cdr l))
                       (if (eq? x (car l))
                           1
                           0)))))

(define countall (lambda (x l)
                   (if (null? l)
                       0
                       (+ (countall x (cdr l))
                          (if (list? (car l))
                              (countall x (car l))
                              (if (eq? x (car l))
                                  1
                                  0
                                  ))))))
                       
(define a '(1 2 3))
(define b '(10 20 30))
(define pend (lambda (a b)
               (if (null? a )
                   b
                   (cons (car a) (pend (cdr a) b)))))

(define rev (lambda (c)
              (if (null? c) c
                  (append (rev (cdr c)) (list (car c))))))

(rev c)

(define d '(a (1 2) b (c d (e f (g))) h))

(define twist (lambda (c)
                (if (null? c) c
                    (append (twist (cdr c))
                            (if (list? (car c)) 
                                (list (twist (car c)))
                                (list (car c)))))))

(twist d)


(define flatten (lambda (c)
                  (if (null? c) 
                      c
                      (append (if (list? (car c))
                                  (flatten (car c))
                                  (list (car c)))
                              (flatten (cdr c))))))
(flatten d)

(define fun_list (lambda (f l)
                   (if (null? l) l
                       (cons 
                         (f (car l))
                         (fun_list f (cdr l))))))
(define ran_list (lambda (t l)
                   (if (= 0 l) '()
                       (cons (random (t) (ran_list t (- l 1))))))
(ran_list 6 20)
(define make_turled
  (lambda (pos heading)
    (let ([pos-at-creation pos]
          [hdg-at creation heading])
      (lambda (msg)
        (let ([oldpos (turtle-position)]
              [oldhdg (turtle-heading)])
          (let ([restore (lambda ()
                           (begin
                             (pen-up)(turtle-set-position oldpos)
                             (turtle-set-heading oldhdg) (pen-down)
                             'done))])
          (cond
            [(eq? msg 'reset)
             (begin
               (set! pos pos-at-creation)
               (set! heading hdg-at-creation)
               (restore))]
            [(eq? msg 'turn)
             (lamgda (angle)
                     (begin
                       (set! heading (+deading angle))
                       (restore)))]
            [(eq? msg 'ahead)
             (lambda (steps)
             (begin
               (pen-up) (turtle-set-position pos)
               (turtle-set-heading heading) (pen-down)
               (forward steps) (set! pos (turtle-position))
               (restore)))])))))))
  (define turtle-reset
    (lambda (turtle)
      (turtle 'reset)))
  (define turtle-right
    (lambda (turtle angle)
      ((turtle 'turn) angle)))
  (define turtle-forward
    (lambda (turtle steps)
      ((turtle 'ahead) steps)))
  (define G (make-graphics-window '(200 200)))
  (define t1 (make-turtle '(0 0) 0))
  (define t2 (make-turtle '(0 0) 60))
  (define t3 (make-turtle '(0 0) 120))
  (define t4 (make-turtle '(0 0) 180))
  (define t5 (make-turtle '(0 0) 240))
  (define t6 (make-turtle '(0 0) 300))
  (define rspiral
    (lambda (n turtle)
      (begin
        (turtle-forward
          turtle
          (* 10 (+ 1 n)))
        (turtle-right turtle 60)
        'done)))
 (define rspiral
    (lambda (n turtle)
      (begin
        (turtle-forward
          turtle
          (* 10 (+ 1 n)))
        (turtle-right turtle -60)
        'done)))
  (define manager
    (lambda args
      (let ([f (first args)] [n (list-ref args 1)]
            [t-list (rest (rest args))] [p-state (pen-state)]
            [show-state (turtle-show?)])
        (letrec ([time-slice
                   (lambda (ctr)
                     (if (= ctr n)
                         'done
                         (bdgin
                           (map (lambda (turtle) (f ctr turtle))
                                t-list)
                           (time-slice (+1 ctr)))))])
                 (begin
                   (turtle-hide) (time-slice 0)
                   (if show-state (turtle-show))
                   (pen-set-state p-state)
                   'done)))))

  (manager rspiral 6 t1 t2 t3 t4 t5 t6)
  (manager (lambda (n turtle) (turtle-reset turtle))
           1 t1 t2 t3 t4 t5 t6)
  (manager lspiral 6 t1 t2 t3 t4 t5 t6)
  
  
  
                       
                     